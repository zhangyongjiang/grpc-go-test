// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain/block_chain.proto

/*
Package blockchain is a generated protocol buffer package.

It is generated from these files:
	blockchain/block_chain.proto

It has these top-level messages:
	MsgInput
	Chaininfo
	EmptyMsg
	TransactionHeader
	Transaction
	TransactionList
	BlockHeader
	Block
*/
package blockchain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgInput struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *MsgInput) Reset()                    { *m = MsgInput{} }
func (m *MsgInput) String() string            { return proto.CompactTextString(m) }
func (*MsgInput) ProtoMessage()               {}
func (*MsgInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgInput) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Chaininfo struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Height int32  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *Chaininfo) Reset()                    { *m = Chaininfo{} }
func (m *Chaininfo) String() string            { return proto.CompactTextString(m) }
func (*Chaininfo) ProtoMessage()               {}
func (*Chaininfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Chaininfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chaininfo) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TransactionHeader struct {
	Nonce string `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`
	Txid  string `protobuf:"bytes,2,opt,name=txid" json:"txid,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *TransactionHeader) Reset()                    { *m = TransactionHeader{} }
func (m *TransactionHeader) String() string            { return proto.CompactTextString(m) }
func (*TransactionHeader) ProtoMessage()               {}
func (*TransactionHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TransactionHeader) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *TransactionHeader) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *TransactionHeader) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Transaction struct {
	Id              string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Header          []byte `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	HeaderSignature string `protobuf:"bytes,3,opt,name=header_signature,json=headerSignature" json:"header_signature,omitempty"`
	Payload         []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Transaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transaction) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Transaction) GetHeaderSignature() string {
	if m != nil {
		return m.HeaderSignature
	}
	return ""
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type TransactionList struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionList) Reset()                    { *m = TransactionList{} }
func (m *TransactionList) String() string            { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()               {}
func (*TransactionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransactionList) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type BlockHeader struct {
	Height            int32  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	PreviousBlockHash string `protobuf:"bytes,2,opt,name=previous_block_hash,json=previousBlockHash" json:"previous_block_hash,omitempty"`
	TransactionCount  int32  `protobuf:"varint,3,opt,name=transaction_count,json=transactionCount" json:"transaction_count,omitempty"`
	Version           int32  `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Timestamp         int32  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	StateRootHash     string `protobuf:"bytes,6,opt,name=state_root_hash,json=stateRootHash" json:"state_root_hash,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BlockHeader) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetPreviousBlockHash() string {
	if m != nil {
		return m.PreviousBlockHash
	}
	return ""
}

func (m *BlockHeader) GetTransactionCount() int32 {
	if m != nil {
		return m.TransactionCount
	}
	return 0
}

func (m *BlockHeader) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetStateRootHash() string {
	if m != nil {
		return m.StateRootHash
	}
	return ""
}

type Block struct {
	Header          []byte         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	HeaderSignature string         `protobuf:"bytes,2,opt,name=header_signature,json=headerSignature" json:"header_signature,omitempty"`
	Transactions    []*Transaction `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Block) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetHeaderSignature() string {
	if m != nil {
		return m.HeaderSignature
	}
	return ""
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgInput)(nil), "blockchain.MsgInput")
	proto.RegisterType((*Chaininfo)(nil), "blockchain.Chaininfo")
	proto.RegisterType((*EmptyMsg)(nil), "blockchain.EmptyMsg")
	proto.RegisterType((*TransactionHeader)(nil), "blockchain.TransactionHeader")
	proto.RegisterType((*Transaction)(nil), "blockchain.Transaction")
	proto.RegisterType((*TransactionList)(nil), "blockchain.TransactionList")
	proto.RegisterType((*BlockHeader)(nil), "blockchain.BlockHeader")
	proto.RegisterType((*Block)(nil), "blockchain.Block")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlockChain service

type BlockChainClient interface {
	GetChaininfo(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Chaininfo, error)
	GetTransaction(ctx context.Context, in *MsgInput, opts ...grpc.CallOption) (*Transaction, error)
	GetUnconfirmedTransactionList(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*TransactionList, error)
	CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	GetBlockByHash(ctx context.Context, in *MsgInput, opts ...grpc.CallOption) (*Block, error)
	GetBlockByHeight(ctx context.Context, in *MsgInput, opts ...grpc.CallOption) (*Block, error)
}

type blockChainClient struct {
	cc *grpc.ClientConn
}

func NewBlockChainClient(cc *grpc.ClientConn) BlockChainClient {
	return &blockChainClient{cc}
}

func (c *blockChainClient) GetChaininfo(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Chaininfo, error) {
	out := new(Chaininfo)
	err := grpc.Invoke(ctx, "/blockchain.BlockChain/GetChaininfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) GetTransaction(ctx context.Context, in *MsgInput, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/blockchain.BlockChain/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) GetUnconfirmedTransactionList(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/blockchain.BlockChain/GetUnconfirmedTransactionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/blockchain.BlockChain/CreateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) GetBlockByHash(ctx context.Context, in *MsgInput, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/blockchain.BlockChain/GetBlockByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) GetBlockByHeight(ctx context.Context, in *MsgInput, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/blockchain.BlockChain/GetBlockByHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockChain service

type BlockChainServer interface {
	GetChaininfo(context.Context, *EmptyMsg) (*Chaininfo, error)
	GetTransaction(context.Context, *MsgInput) (*Transaction, error)
	GetUnconfirmedTransactionList(context.Context, *EmptyMsg) (*TransactionList, error)
	CreateTransaction(context.Context, *Transaction) (*Transaction, error)
	GetBlockByHash(context.Context, *MsgInput) (*Block, error)
	GetBlockByHeight(context.Context, *MsgInput) (*Block, error)
}

func RegisterBlockChainServer(s *grpc.Server, srv BlockChainServer) {
	s.RegisterService(&_BlockChain_serviceDesc, srv)
}

func _BlockChain_GetChaininfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).GetChaininfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockChain/GetChaininfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).GetChaininfo(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockChain/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).GetTransaction(ctx, req.(*MsgInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_GetUnconfirmedTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).GetUnconfirmedTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockChain/GetUnconfirmedTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).GetUnconfirmedTransactionList(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockChain/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).CreateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockChain/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).GetBlockByHash(ctx, req.(*MsgInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.BlockChain/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).GetBlockByHeight(ctx, req.(*MsgInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.BlockChain",
	HandlerType: (*BlockChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChaininfo",
			Handler:    _BlockChain_GetChaininfo_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _BlockChain_GetTransaction_Handler,
		},
		{
			MethodName: "GetUnconfirmedTransactionList",
			Handler:    _BlockChain_GetUnconfirmedTransactionList_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _BlockChain_CreateTransaction_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _BlockChain_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _BlockChain_GetBlockByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain/block_chain.proto",
}

func init() { proto.RegisterFile("blockchain/block_chain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xc7, 0x95, 0x6e, 0xdd, 0x6f, 0x3d, 0xdd, 0xd6, 0xd5, 0xdd, 0x7e, 0xcb, 0xda, 0x31, 0x4a,
	0x2e, 0xd0, 0x00, 0xad, 0x41, 0xe3, 0x02, 0x09, 0xee, 0x3a, 0xa1, 0x81, 0xc4, 0xd0, 0x08, 0x7f,
	0xae, 0x90, 0x2a, 0x37, 0xf1, 0x52, 0x8b, 0xd6, 0x8e, 0x62, 0x77, 0x5a, 0x41, 0xdc, 0x70, 0xc3,
	0x03, 0xf0, 0x68, 0x88, 0x17, 0x40, 0x3c, 0x08, 0xf2, 0x49, 0x42, 0xdc, 0x69, 0x15, 0x70, 0x77,
	0x7c, 0x7c, 0xf2, 0xf9, 0x9e, 0x7f, 0x0e, 0xec, 0x0d, 0xc7, 0x32, 0x7c, 0x1f, 0x8e, 0x28, 0x17,
	0x3e, 0x9a, 0x03, 0xb4, 0x7b, 0x49, 0x2a, 0xb5, 0x24, 0x50, 0xde, 0xb6, 0xf7, 0x62, 0x29, 0xe3,
	0x31, 0xf3, 0x69, 0xc2, 0x7d, 0x2a, 0x84, 0xd4, 0x54, 0x73, 0x29, 0x54, 0x16, 0xe9, 0xed, 0xc3,
	0xea, 0xa9, 0x8a, 0x9f, 0x89, 0x64, 0xaa, 0x09, 0x81, 0xe5, 0x88, 0x6a, 0xea, 0x3a, 0x5d, 0xe7,
	0xa0, 0x16, 0xa0, 0xed, 0x3d, 0x84, 0xda, 0xb1, 0xc1, 0x70, 0x71, 0x2e, 0x4d, 0x80, 0xa0, 0x13,
	0x56, 0x04, 0x18, 0x9b, 0xfc, 0x0f, 0x2b, 0x23, 0xc6, 0xe3, 0x91, 0x76, 0x2b, 0x5d, 0xe7, 0xa0,
	0x1a, 0xe4, 0x27, 0x0f, 0x60, 0xf5, 0xc9, 0x24, 0xd1, 0xb3, 0x53, 0x15, 0x7b, 0x2f, 0xa1, 0xf9,
	0x3a, 0xa5, 0x42, 0xd1, 0xd0, 0x48, 0x3f, 0x65, 0x34, 0x62, 0x29, 0xd9, 0x82, 0xaa, 0x90, 0x22,
	0x2c, 0x68, 0xd9, 0xc1, 0x48, 0xe8, 0x4b, 0x1e, 0x21, 0xac, 0x16, 0xa0, 0x8d, 0xbe, 0x59, 0xc2,
	0xdc, 0xa5, 0xdc, 0x37, 0x4b, 0x98, 0xf7, 0x01, 0xea, 0x16, 0x92, 0x6c, 0x40, 0x85, 0x47, 0x39,
	0xa9, 0xc2, 0xa3, 0x2c, 0x2b, 0x23, 0x83, 0xa0, 0xb5, 0x20, 0x3f, 0x91, 0x3b, 0xb0, 0x99, 0x59,
	0x03, 0xc5, 0x63, 0x41, 0xf5, 0x34, 0x2d, 0xb0, 0x8d, 0xcc, 0xff, 0xaa, 0x70, 0x13, 0x17, 0xfe,
	0x4b, 0xe8, 0x6c, 0x2c, 0x69, 0xe4, 0x2e, 0x23, 0xa3, 0x38, 0x7a, 0x2f, 0xa0, 0x61, 0x69, 0x3f,
	0xe7, 0x4a, 0x93, 0xc7, 0xb0, 0xa6, 0x4b, 0x97, 0x72, 0x9d, 0xee, 0xd2, 0x41, 0xfd, 0x68, 0xa7,
	0x57, 0xce, 0xa1, 0x67, 0x7d, 0x12, 0xcc, 0x05, 0x7b, 0x3f, 0x1c, 0xa8, 0xf7, 0x4d, 0x60, 0xde,
	0x99, 0xb2, 0xa5, 0x8e, 0xdd, 0x52, 0xd2, 0x83, 0x56, 0x92, 0xb2, 0x0b, 0x2e, 0xa7, 0x6a, 0x90,
	0xcd, 0x7c, 0x44, 0xd5, 0x28, 0x6f, 0x55, 0xb3, 0xb8, 0xca, 0x48, 0x54, 0x8d, 0xc8, 0x3d, 0x68,
	0x5a, 0x3a, 0x83, 0x50, 0x4e, 0x85, 0xc6, 0x6a, 0xab, 0xc1, 0xa6, 0x75, 0x71, 0x6c, 0xfc, 0xa6,
	0xdc, 0x0b, 0x96, 0x2a, 0x2e, 0x05, 0x96, 0x5b, 0x0d, 0x8a, 0x23, 0xd9, 0x83, 0x9a, 0xe6, 0x13,
	0xa6, 0x34, 0x9d, 0x24, 0x6e, 0x15, 0xef, 0x4a, 0x07, 0xb9, 0x0d, 0x0d, 0xa5, 0xa9, 0x66, 0x83,
	0x54, 0x4a, 0x9d, 0x25, 0xb4, 0x82, 0x09, 0xad, 0xa3, 0x3b, 0x90, 0x52, 0x9b, 0x64, 0xbc, 0x2f,
	0x0e, 0x54, 0x31, 0x35, 0x6b, 0x36, 0xce, 0x1f, 0x67, 0x53, 0xb9, 0x7e, 0x36, 0x57, 0xdb, 0xbd,
	0xf4, 0x0f, 0xed, 0x3e, 0xfa, 0xbe, 0x0c, 0x80, 0x99, 0xe0, 0x62, 0x93, 0x33, 0x58, 0x3b, 0x61,
	0xba, 0x5c, 0xf2, 0x2d, 0x9b, 0x52, 0xac, 0x70, 0x7b, 0xdb, 0xf6, 0xfe, 0x0e, 0xf6, 0x5a, 0x9f,
	0xbf, 0xfd, 0xfc, 0x5a, 0x59, 0x27, 0x75, 0x1f, 0x6f, 0x0e, 0x91, 0x30, 0x84, 0x8d, 0x13, 0xa6,
	0xed, 0xf5, 0x9c, 0x63, 0x16, 0xef, 0xad, 0xbd, 0x28, 0x5f, 0xef, 0x16, 0x52, 0x3b, 0x64, 0xd7,
	0xb7, 0x12, 0xf7, 0x87, 0xb3, 0x43, 0x1e, 0xf9, 0x1f, 0xcd, 0xb3, 0xfc, 0x44, 0x34, 0xdc, 0x38,
	0x61, 0xfa, 0x8d, 0x08, 0xa5, 0x38, 0xe7, 0xe9, 0x84, 0x45, 0x57, 0x37, 0xf2, 0xfa, 0x32, 0x3a,
	0x0b, 0x24, 0xcd, 0x27, 0x5e, 0x17, 0x65, 0xdb, 0xc4, 0x9d, 0x93, 0x9d, 0x96, 0x1a, 0x84, 0x41,
	0xf3, 0x38, 0x65, 0x54, 0x33, 0xbb, 0xb8, 0x45, 0x65, 0x2c, 0xae, 0x6f, 0x1f, 0x85, 0x5c, 0xaf,
	0x35, 0x27, 0x14, 0x22, 0xf9, 0x91, 0x73, 0x97, 0xbc, 0xc5, 0x06, 0xe2, 0x8c, 0xfa, 0x33, 0x5c,
	0xe5, 0xeb, 0x1b, 0xd8, 0xb4, 0xbd, 0x18, 0xee, 0x75, 0x10, 0xbd, 0x4d, 0x5a, 0xd9, 0x5f, 0x71,
	0xbe, 0x69, 0xef, 0x60, 0xd3, 0xe2, 0x66, 0x8f, 0xea, 0xaf, 0xc9, 0x37, 0x91, 0xbc, 0x4b, 0x76,
	0x4a, 0x72, 0xf6, 0x2e, 0x73, 0x7a, 0xff, 0x3e, 0x74, 0xb8, 0xec, 0xc5, 0x69, 0x12, 0xf6, 0xd8,
	0x25, 0x9d, 0x24, 0x63, 0xa6, 0x2c, 0x4a, 0xbf, 0x51, 0xee, 0xdc, 0x99, 0xf9, 0xf5, 0x9e, 0x39,
	0xc3, 0x15, 0xfc, 0x07, 0x3f, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xd9, 0xd5, 0xed, 0xcd,
	0x05, 0x00, 0x00,
}
